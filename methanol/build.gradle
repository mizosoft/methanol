import java.nio.file.Files
import java.time.Duration
import java.util.concurrent.ConcurrentHashMap
import java.util.concurrent.atomic.AtomicReference

dependencies {
  testImplementation(libs.testng) {
    exclude group: 'junit'
    exclude group: 'org.checkerframework', module: 'checker-compat-qual'
  }
  testImplementation libs.junit.params
  testImplementation libs.reactivestreams.tck.flow
  testImplementation libs.mockwebserver
  testImplementation libs.jimfs
  testImplementation project(':methanol-testutils')
}

compileJava {
  // Suppress exporting to modules unresolvable on compilation
  options.compilerArgs += '-Xlint:-module'
}

test {
  exclude '**/tck/**'
  // Run from classpath to use META-INF/services which doesn't work from module path
  moduleOptions {
    runOnClasspath = true
  }

  systemProperty 'junit.jupiter.execution.timeout.mode', 'disabled_on_debug'
}

ext {
  tckLoggers = new ConcurrentHashMap<String, PrintWriter>()
}

task tckTest(type: Test) {
  useTestNG()
  include '**/tck/**'
  shouldRunAfter test
  scanForTestClasses false
  testLogging {
    events = ['failed']
  }

  if (System.getenv().GITHUB_ACTIONS) {
    systemProperties.TCK_TIMEOUT_MILLIS = 1_000
    systemProperties.TCK_NO_SIGNAL_TIMEOUT_MILLIS = 100
  }

  timeout = Duration.ofMinutes(15)

  def runningTckTest = new AtomicReference<String>()

  beforeTest { TestDescriptor descriptor ->
    file('build/test-results/tckTest/logs').mkdirs()

    def logger = tckLoggers.computeIfAbsent(descriptor.className) {
      new PrintWriter(
          Files.newBufferedWriter(
              file("build/test-results/tckTest/logs/${descriptor.className}.log").toPath()), true)
    }

    if (runningTckTest.getAndSet(descriptor.className) != descriptor.className) {
      println "Running TCK test: ${descriptor.className.tokenize('.').last()}"
    } else {
      logger.println()
    }

    logger.println("Running ${descriptor.displayName}")
    logger.flush()
  }

  afterTest { TestDescriptor descriptor, TestResult result ->
    def logger = tckLoggers.get(descriptor.className)
    logger.println("Result: ${result.resultType}")
    if (!result.exceptions.empty) {
      if (result.exceptions.size() == 1) {
        result.exceptions.first().printStackTrace(logger)
      } else {
        def exception = new Throwable("multiple test failures")
        result.exceptions.forEach { exception.addSuppressed(it) }
        exception.printStackTrace(logger)
      }
    }

    logger.println()
    logger.println('*'.repeat(120))
  }
}

task closeTckLoggers {
  doFirst {
    tckLoggers.values().forEach { it.close() }
    tckLoggers.clear()
  }
}

tckTest.finalizedBy closeTckLoggers

check.dependsOn tckTest

addReads(compileTestJava, 'methanol.testutils')
addReads(compileTestJava, 'org.junit.jupiter.params')
addReads(compileTestJava, 'org.assertj.core')

// This avoids a mysterious compilation error caused by some kotlin class not being accessible
// to javac. Kotlin is brought transitively by okhttp's MockWebServer.
addReads(compileTestJava, 'kotlin.stdlib')
